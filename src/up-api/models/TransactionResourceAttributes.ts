/* tslint:disable */
/* eslint-disable */
/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TransactionResourceAttributesAmount } from './TransactionResourceAttributesAmount';
import {
    TransactionResourceAttributesAmountFromJSON,
    TransactionResourceAttributesAmountFromJSONTyped,
    TransactionResourceAttributesAmountToJSON,
} from './TransactionResourceAttributesAmount';
import type { TransactionResourceAttributesCashback } from './TransactionResourceAttributesCashback';
import {
    TransactionResourceAttributesCashbackFromJSON,
    TransactionResourceAttributesCashbackFromJSONTyped,
    TransactionResourceAttributesCashbackToJSON,
} from './TransactionResourceAttributesCashback';
import type { TransactionResourceAttributesForeignAmount } from './TransactionResourceAttributesForeignAmount';
import {
    TransactionResourceAttributesForeignAmountFromJSON,
    TransactionResourceAttributesForeignAmountFromJSONTyped,
    TransactionResourceAttributesForeignAmountToJSON,
} from './TransactionResourceAttributesForeignAmount';
import type { TransactionResourceAttributesHoldInfo } from './TransactionResourceAttributesHoldInfo';
import {
    TransactionResourceAttributesHoldInfoFromJSON,
    TransactionResourceAttributesHoldInfoFromJSONTyped,
    TransactionResourceAttributesHoldInfoToJSON,
} from './TransactionResourceAttributesHoldInfo';
import type { TransactionResourceAttributesRoundUp } from './TransactionResourceAttributesRoundUp';
import {
    TransactionResourceAttributesRoundUpFromJSON,
    TransactionResourceAttributesRoundUpFromJSONTyped,
    TransactionResourceAttributesRoundUpToJSON,
} from './TransactionResourceAttributesRoundUp';
import type { TransactionStatusEnum } from './TransactionStatusEnum';
import {
    TransactionStatusEnumFromJSON,
    TransactionStatusEnumFromJSONTyped,
    TransactionStatusEnumToJSON,
} from './TransactionStatusEnum';

/**
 * 
 * @export
 * @interface TransactionResourceAttributes
 */
export interface TransactionResourceAttributes {
    /**
     * The current processing status of this transaction, according to
     * whether or not this transaction has settled or is still held.
     * @type {TransactionStatusEnum}
     * @memberof TransactionResourceAttributes
     */
    status: TransactionStatusEnum | null;
    /**
     * The original, unprocessed text of the transaction. This is often not
     * a perfect indicator of the actual merchant, but it is useful for
     * reconciliation purposes in some cases.
     * @type {string}
     * @memberof TransactionResourceAttributes
     */
    rawText: string | null;
    /**
     * A short description for this transaction. Usually the merchant name
     * for purchases.
     * @type {string}
     * @memberof TransactionResourceAttributes
     */
    description: string;
    /**
     * Attached message for this transaction, such as a payment message, or a
     * transfer note.
     * @type {string}
     * @memberof TransactionResourceAttributes
     */
    message: string | null;
    /**
     * Boolean flag set to true on transactions that support the use of
     * categories.
     * @type {boolean}
     * @memberof TransactionResourceAttributes
     */
    isCategorizable: boolean;
    /**
     * 
     * @type {TransactionResourceAttributesHoldInfo}
     * @memberof TransactionResourceAttributes
     */
    holdInfo: TransactionResourceAttributesHoldInfo | null;
    /**
     * 
     * @type {TransactionResourceAttributesRoundUp}
     * @memberof TransactionResourceAttributes
     */
    roundUp: TransactionResourceAttributesRoundUp | null;
    /**
     * 
     * @type {TransactionResourceAttributesCashback}
     * @memberof TransactionResourceAttributes
     */
    cashback: TransactionResourceAttributesCashback | null;
    /**
     * 
     * @type {TransactionResourceAttributesAmount}
     * @memberof TransactionResourceAttributes
     */
    amount: TransactionResourceAttributesAmount;
    /**
     * 
     * @type {TransactionResourceAttributesForeignAmount}
     * @memberof TransactionResourceAttributes
     */
    foreignAmount: TransactionResourceAttributesForeignAmount | null;
    /**
     * The date-time at which this transaction settled. This field will be
     * `null` for transactions that are currently in the `HELD` status.
     * @type {Date}
     * @memberof TransactionResourceAttributes
     */
    settledAt: Date | null;
    /**
     * The date-time at which this transaction was first encountered.
     * @type {Date}
     * @memberof TransactionResourceAttributes
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the TransactionResourceAttributes interface.
 */
export function instanceOfTransactionResourceAttributes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "rawText" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "isCategorizable" in value;
    isInstance = isInstance && "holdInfo" in value;
    isInstance = isInstance && "roundUp" in value;
    isInstance = isInstance && "cashback" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "foreignAmount" in value;
    isInstance = isInstance && "settledAt" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function TransactionResourceAttributesFromJSON(json: any): TransactionResourceAttributes {
    return TransactionResourceAttributesFromJSONTyped(json, false);
}

export function TransactionResourceAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionResourceAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': TransactionStatusEnumFromJSON(json['status']),
        'rawText': json['rawText'],
        'description': json['description'],
        'message': json['message'],
        'isCategorizable': json['isCategorizable'],
        'holdInfo': TransactionResourceAttributesHoldInfoFromJSON(json['holdInfo']),
        'roundUp': TransactionResourceAttributesRoundUpFromJSON(json['roundUp']),
        'cashback': TransactionResourceAttributesCashbackFromJSON(json['cashback']),
        'amount': TransactionResourceAttributesAmountFromJSON(json['amount']),
        'foreignAmount': TransactionResourceAttributesForeignAmountFromJSON(json['foreignAmount']),
        'settledAt': (json['settledAt'] === null ? null : new Date(json['settledAt'])),
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function TransactionResourceAttributesToJSON(value?: TransactionResourceAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': TransactionStatusEnumToJSON(value.status),
        'rawText': value.rawText,
        'description': value.description,
        'message': value.message,
        'isCategorizable': value.isCategorizable,
        'holdInfo': TransactionResourceAttributesHoldInfoToJSON(value.holdInfo),
        'roundUp': TransactionResourceAttributesRoundUpToJSON(value.roundUp),
        'cashback': TransactionResourceAttributesCashbackToJSON(value.cashback),
        'amount': TransactionResourceAttributesAmountToJSON(value.amount),
        'foreignAmount': TransactionResourceAttributesForeignAmountToJSON(value.foreignAmount),
        'settledAt': (value.settledAt === null ? null : value.settledAt.toISOString()),
        'createdAt': (value.createdAt.toISOString()),
    };
}

