/* tslint:disable */
/* eslint-disable */
/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountTypeEnum,
  GetAccountResponse,
  ListAccountsResponse,
  OwnershipTypeEnum,
} from '../models';
import {
    AccountTypeEnumFromJSON,
    AccountTypeEnumToJSON,
    GetAccountResponseFromJSON,
    GetAccountResponseToJSON,
    ListAccountsResponseFromJSON,
    ListAccountsResponseToJSON,
    OwnershipTypeEnumFromJSON,
    OwnershipTypeEnumToJSON,
} from '../models';

export interface AccountsGetRequest {
    pageSize?: number;
    filterAccountType?: AccountTypeEnum;
    filterOwnershipType?: OwnershipTypeEnum;
}

export interface AccountsIdGetRequest {
    id: string;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Retrieve a paginated list of all accounts for the currently authenticated user. The returned list is paginated and can be scrolled by following the `prev` and `next` links where present. 
     * List accounts
     */
    async accountsGetRaw(requestParameters: AccountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAccountsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        if (requestParameters.filterAccountType !== undefined) {
            queryParameters['filter[accountType]'] = requestParameters.filterAccountType;
        }

        if (requestParameters.filterOwnershipType !== undefined) {
            queryParameters['filter[ownershipType]'] = requestParameters.filterOwnershipType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAccountsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a paginated list of all accounts for the currently authenticated user. The returned list is paginated and can be scrolled by following the `prev` and `next` links where present. 
     * List accounts
     */
    async accountsGet(requestParameters: AccountsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAccountsResponse> {
        const response = await this.accountsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific account by providing its unique identifier. 
     * Retrieve account
     */
    async accountsIdGetRaw(requestParameters: AccountsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific account by providing its unique identifier. 
     * Retrieve account
     */
    async accountsIdGet(requestParameters: AccountsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountResponse> {
        const response = await this.accountsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
