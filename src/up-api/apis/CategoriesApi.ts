/* tslint:disable */
/* eslint-disable */
/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetCategoryResponse,
  ListCategoriesResponse,
  UpdateTransactionCategoryRequest,
} from '../models';
import {
    GetCategoryResponseFromJSON,
    GetCategoryResponseToJSON,
    ListCategoriesResponseFromJSON,
    ListCategoriesResponseToJSON,
    UpdateTransactionCategoryRequestFromJSON,
    UpdateTransactionCategoryRequestToJSON,
} from '../models';

export interface CategoriesGetRequest {
    filterParent?: string;
}

export interface CategoriesIdGetRequest {
    id: string;
}

export interface TransactionsTransactionIdRelationshipsCategoryPatchRequest {
    transactionId: string;
    updateTransactionCategoryRequest?: UpdateTransactionCategoryRequest;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * Retrieve a list of all categories and their ancestry. The returned list is not paginated. 
     * List categories
     */
    async categoriesGetRaw(requestParameters: CategoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCategoriesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterParent !== undefined) {
            queryParameters['filter[parent]'] = requestParameters.filterParent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCategoriesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all categories and their ancestry. The returned list is not paginated. 
     * List categories
     */
    async categoriesGet(requestParameters: CategoriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCategoriesResponse> {
        const response = await this.categoriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific category by providing its unique identifier. 
     * Retrieve category
     */
    async categoriesIdGetRaw(requestParameters: CategoriesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCategoryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling categoriesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific category by providing its unique identifier. 
     * Retrieve category
     */
    async categoriesIdGet(requestParameters: CategoriesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCategoryResponse> {
        const response = await this.categoriesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the category associated with a transaction. Only transactions for which `isCategorizable` is set to true support this operation. The `id` is taken from the list exposed on `/categories` and cannot be one of the top-level (parent) categories. To de-categorize a transaction, set the entire `data` key to `null`. An HTTP `204` is returned on success. The associated category, along with its request URL is also exposed via the `category` relationship on the transaction resource returned from `/transactions/{id}`. 
     * Categorize transaction
     */
    async transactionsTransactionIdRelationshipsCategoryPatchRaw(requestParameters: TransactionsTransactionIdRelationshipsCategoryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling transactionsTransactionIdRelationshipsCategoryPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions/{transactionId}/relationships/category`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTransactionCategoryRequestToJSON(requestParameters.updateTransactionCategoryRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the category associated with a transaction. Only transactions for which `isCategorizable` is set to true support this operation. The `id` is taken from the list exposed on `/categories` and cannot be one of the top-level (parent) categories. To de-categorize a transaction, set the entire `data` key to `null`. An HTTP `204` is returned on success. The associated category, along with its request URL is also exposed via the `category` relationship on the transaction resource returned from `/transactions/{id}`. 
     * Categorize transaction
     */
    async transactionsTransactionIdRelationshipsCategoryPatch(requestParameters: TransactionsTransactionIdRelationshipsCategoryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transactionsTransactionIdRelationshipsCategoryPatchRaw(requestParameters, initOverrides);
    }

}
