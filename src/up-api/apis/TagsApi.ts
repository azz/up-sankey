/* tslint:disable */
/* eslint-disable */
/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListTagsResponse,
  UpdateTransactionTagsRequest,
} from '../models';
import {
    ListTagsResponseFromJSON,
    ListTagsResponseToJSON,
    UpdateTransactionTagsRequestFromJSON,
    UpdateTransactionTagsRequestToJSON,
} from '../models';

export interface TagsGetRequest {
    pageSize?: number;
}

export interface TransactionsTransactionIdRelationshipsTagsDeleteRequest {
    transactionId: string;
    updateTransactionTagsRequest?: UpdateTransactionTagsRequest;
}

export interface TransactionsTransactionIdRelationshipsTagsPostRequest {
    transactionId: string;
    updateTransactionTagsRequest?: UpdateTransactionTagsRequest;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Retrieve a list of all tags currently in use. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. Results are ordered lexicographically. The `transactions` relationship for each tag exposes a link to get the transactions with the given tag. 
     * List tags
     */
    async tagsGetRaw(requestParameters: TagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTagsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTagsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all tags currently in use. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. Results are ordered lexicographically. The `transactions` relationship for each tag exposes a link to get the transactions with the given tag. 
     * List tags
     */
    async tagsGet(requestParameters: TagsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTagsResponse> {
        const response = await this.tagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disassociates one or more tags from a specific transaction. Tags that are not associated are silently ignored. An HTTP `204` is returned on success. The associated tags, along with this request URL, are also exposed via the `tags` relationship on the transaction resource returned from `/transactions/{id}`. 
     * Remove tags from transaction
     */
    async transactionsTransactionIdRelationshipsTagsDeleteRaw(requestParameters: TransactionsTransactionIdRelationshipsTagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling transactionsTransactionIdRelationshipsTagsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions/{transactionId}/relationships/tags`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTransactionTagsRequestToJSON(requestParameters.updateTransactionTagsRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disassociates one or more tags from a specific transaction. Tags that are not associated are silently ignored. An HTTP `204` is returned on success. The associated tags, along with this request URL, are also exposed via the `tags` relationship on the transaction resource returned from `/transactions/{id}`. 
     * Remove tags from transaction
     */
    async transactionsTransactionIdRelationshipsTagsDelete(requestParameters: TransactionsTransactionIdRelationshipsTagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transactionsTransactionIdRelationshipsTagsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Associates one or more tags with a specific transaction. No more than 6 tags may be present on any single transaction. Duplicate tags are silently ignored. An HTTP `204` is returned on success. The associated tags, along with this request URL, are also exposed via the `tags` relationship on the transaction resource returned from `/transactions/{id}`. 
     * Add tags to transaction
     */
    async transactionsTransactionIdRelationshipsTagsPostRaw(requestParameters: TransactionsTransactionIdRelationshipsTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling transactionsTransactionIdRelationshipsTagsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions/{transactionId}/relationships/tags`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTransactionTagsRequestToJSON(requestParameters.updateTransactionTagsRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Associates one or more tags with a specific transaction. No more than 6 tags may be present on any single transaction. Duplicate tags are silently ignored. An HTTP `204` is returned on success. The associated tags, along with this request URL, are also exposed via the `tags` relationship on the transaction resource returned from `/transactions/{id}`. 
     * Add tags to transaction
     */
    async transactionsTransactionIdRelationshipsTagsPost(requestParameters: TransactionsTransactionIdRelationshipsTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transactionsTransactionIdRelationshipsTagsPostRaw(requestParameters, initOverrides);
    }

}
